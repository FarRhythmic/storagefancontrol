#!/usr/bin/python

import subprocess
import re
import time
import syslog

temp_target = 40          # Max temperature of the hottest disk
temp_lower_margin = 2     # Difference in degrees from temp_target
distance_from_average_treshold = 5
polling_interval = 180     
pwm_max = 200             # Maximum PWM value -> maximum fan speed
pwm_min = 100             # Ditto for minimum.
pwm_default = 130
pwm_minimum_change = 5   
pwm_maximum_change = 20  
pwm_safety_value = 160

temp_old = None

enablefan = '/sys/class/hwmon/hwmon2/device/pwm2_enable'
controlfan = '/sys/class/hwmon/hwmon2/device/pwm2'    
ports_per_controller = 8 # Number of ports per SAS controller card



def number_of_controllers():
    rawdata = subprocess.Popen(\
        ['/opt/MegaRAID/MegaCli/megacli','-cfgdsply','-aALL'],\
         stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0]
    regex = re.compile('Adapter:.*')
    match = regex.findall(rawdata)
    return len(match)


def get_drive_temp(controller, port):

    rawdata =  subprocess.Popen(\
        ['/opt/MegaRAID/MegaCli/megacli',  '-pdinfo', '-physdrv', '[64:' +\
               str(port) +']', '-a' + str(controller)],\
               stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0] 

    regex = re.compile('Drive Temperature :(.*)')
    match = regex.search(rawdata)
    try:
        temp = match.group(1).split("C")[0]

        # 
        # Ugly hack: issue with some old WD drives
        # Controller reports 65C for them.
        # 
        if int(temp) >= 60:
            temp = "?"
        return temp
        
    except(AttributeError):
        return ""
    except(IndexError):
        return ""


def get_drive_info(controller, port):
    return get_drive_temp(controller, port)


def fetch_data():

    controllercount = number_of_controllers()

    drivearray = \
         [[0 for x in xrange(ports_per_controller)]\
            for x in xrange(controllercount)]
        
    for x in xrange(controllercount):
        for y in xrange(ports_per_controller):
            disk = get_drive_info(x, y)
            if len(disk) == 0:
                disk = ""
            drivearray[x][y] = disk

    return drivearray


def get_highest_temperature(data):

    temperature = 0
    for controller in data:
        for disk in controller:
            if disk > temperature:
                temperature = disk
    return int(temperature)

def get_all_device_temperature(data):
    temperature = 0
    disks = 0
    for controller in data:
        for disk in controller:
            if disk and disk > temperature:
                disks += 1
                temperature += int(disk)
    return int(temperature / disks)

def get_pwm():
    pwm = open(controlfan, 'r')
    pwmvalue = int(pwm.read().strip())
    pwm.close()
    syslog.syslog("Current PWM: " + str(pwmvalue))
    return pwmvalue 

def set_pwm(value):
    
    value = pwm_max if value > pwm_max else value
    value = pwm_min if value < pwm_min else value

    pwm = open(controlfan, 'w')
    syslog.syslog("Set PWM value: " + str(value))
    pwm.write(str(value))
    pwm.close()

def enable_fan_control(device):
    f = open(device, 'w')
    try:
        f.write('1')
        f.close()
    except IOError:
        message = "Error enabling fan control."
        syslog.syslog(message)
        print message


def control_fan(data):
    
    global temp_old
    temp = get_highest_temperature(data)

    
    if  temp_old is None:
        temp_old = temp

    delta_old_new = temp - temp_old

    if temp_old < temp:
        syslog.syslog("Temp is rising.")
        temperature_is_changing = True
    
    if temp_old > temp:
        syslog.syslog("Temp is falling.")
        temperature_is_changing = True
    
    if temp_old == temp:
        syslog.syslog("Temp has not changed.")
        temperature_is_changing = False

    pwm = get_pwm()
    delta_absolute = temp - temp_target
    pwm_absolute = pwm_minimum_change * delta_absolute
    pwm_relative = pwm_minimum_change * delta_old_new

    syslog.syslog("Drive temperature: " + str(temp))
    syslog.syslog("Difference in degrees: " + str(delta_absolute))
    
    if temp > temp_target:
        syslog.syslog("Temp is too high.")
        new_pwm = pwm + pwm_absolute
        set_pwm(new_pwm)
    elif temp < (temp_target - temp_lower_margin):
        syslog.syslog("Temp is too low.")
        new_pwm = pwm + pwm_absolute
        set_pwm(new_pwm)
    elif temperature_is_changing:
        syslog.syslog("Temp is changing, requires ajustment.")
        new_pwm = pwm + pwm_relative
        set_pwm(new_pwm)
    else:
        syslog.syslog("No adjustment needed.") 

    temp_old = temp
        

def main():

    try:
        syslog.syslog("Starting disk fan control.")
        enable_fan_control(enablefan)
        pwm = get_pwm()
        if pwm < pwm_default:
            syslog.syslog("Set to default value.")
            set_pwm(pwm_default)

        while True:
            data = fetch_data()
            control_fan(data)
            time.sleep(polling_interval)

    except (KeyboardInterrupt, SystemExit):
        set_pwm(pwm_safety_value)

if __name__ == "__main__":
    
    main()

