#!/usr/bin/python
"""
This program controls the chassis fan speed through PWM based on the temperature
of the hottest hard drive in the chassis. It uses the IBM M1015 or LSI tool 
'MegaCli' for reading hard drive temperatures.
"""
import os
import subprocess
import re
import time
import syslog

def log(message):
    """
    Logs messages to syslog and screen if 'export DEBUG=True'
    """
    syslog.syslog(str(message))

    try:
        if os.environ['DEBUG'] == "True":
            print message
    except (KeyError):
        pass

class PID:                               
    """
    Discrete PID controll
    Source: http://code.activestate.com/recipes/577231-discrete-pid-controller/  
    """ 

    def __init__(self, P=1.0, I=1, D=1.0, Derivator=0, Integrator=0, \
                Integrator_max=10, Integrator_min=10):
        """
        Generic initialisation of local variables.
        """

        self.Kp=P                                                                
        self.Ki=I                                                                
        self.Kd=D                                                                
        self.Derivator=Derivator                                                 
        self.Integrator=Integrator                                               
        self.Integrator_max=Integrator_max                                       
        self.Integrator_min=Integrator_min                                       
                                                                                 
        self.set_point=0.0                                                       
        self.error=0.0                                                           
                                                                                 
    def update(self,current_value):                                              
        """                                                                      
        Calculate PID output value for given reference input and feedback        
        Current_value = set_point - measured value (difference)
        """                                                                      
                                                                                 
        self.error = self.set_point - current_value                              
                                                                                 
        self.P_value = self.Kp * self.error                                      
        self.D_value = self.Kd * ( self.error - self.Derivator)                  
        self.Derivator = self.error                                              
                                                                                 
        self.Integrator = self.Integrator + self.error                           
                                                                                 
        if self.Integrator > self.Integrator_max:                                
            self.Integrator = self.Integrator_max                                
        elif self.Integrator < self.Integrator_min:                              
            self.Integrator = self.Integrator_min                                
                                                                                 
        self.I_value = self.Integrator * self.Ki                                 
                                                                                 
        PID = self.P_value + self.I_value + self.D_value                         
                                                                                 
        return PID                                                               
                                                                                 
    def setPoint(self,set_point):                                                
        """                                                                      
        Initilize the setpoint of PID                                            
        """                                                                      
        self.set_point = set_point                                               
        self.Integrator=0                                                        
        self.Derivator=0                                                         


class FanControl:
    """
    The chassis object provides you with the option:
    1. Get the temperature of the hottest hard drive
    2. Get the current fan speed 
    3. Set the fan speed
    """

    def __init__(self):
        """
        Generic init method.
        """
        self.target_temperature = 40
        self.sleep_time = 30
        self.pwm_max = 255
        self.pwm_min = 100
        self.pwm_safety = 160
        self.megacli = "/opt/MegaRAID/MegaCli/megacli"
        self.ports_per_controller = 8 
        self.enablefan = '/sys/class/hwmon/hwmon2/device/pwm2_enable'
        self.fan_control_device = '/sys/class/hwmon/hwmon2/device/pwm2'
        self.debug = False

    def log(self):
        """
        Log temperature and fan speed to syslog (& screen)
        """
        temp = self.get_highest_temperature()
        fanspeed = self.get_pwm()

        message = "Temperature: " + str(temp) + " | Fan speed: " + str(fanspeed) 
        log(message)

    def number_of_controllers(self):
        """
        Get the number of LSI HBAs on the system.
        In my case, I have 3 controllers with 8 drives each.
        """
        rawdata = subprocess.Popen(\
            [self.megacli,'-cfgdsply','-aALL'],\
             stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0]
        regex = re.compile('Adapter:.*')
        match = regex.findall(rawdata)
        return len(match)

    def get_drive_temp(self, controller, port):
        """
        Get the temperature from an individual drive through the megacli
        utility. The return value is a positive integer that specifies the
        temperature in Celcius.
        """
        rawdata =  subprocess.Popen(\
            [self.megacli,  '-pdinfo', '-physdrv', '[64:' +\
               str(port) +']', '-a' + str(controller)],\
               stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0] 

        regex = re.compile('Drive Temperature :(.*)')
        match = regex.search(rawdata)
        try:
            temp = match.group(1).split("C")[0]

            # Ugly hack: issue with some old WD drives
            # Controller reports 65C for them.
            if temp == "N/A":
                temp = "?"
            if int(temp) >= 60:
                temp = "?"
            return temp
            
        except(AttributeError):
            return ""
        except(IndexError):
            return ""

    def fetch_data(self):
        """
        Returns a two-dimentional list containing
        the temperature of each drive. The first dimension is the 
        chassis. The second dimension is the drive.
        """

        drivearray = \
             [[0 for x in xrange(self.ports_per_controller)]\
                for x in xrange(self.number_of_controllers())]
            
        for controller in xrange(self.number_of_controllers()):
            for port in xrange(self.ports_per_controller):
                disk = self.get_drive_temp(controller, port)
                if len(disk) == 0:
                    disk = ""
                drivearray[controller][port] = disk

        return drivearray

    def get_highest_temperature(self):
        """
        Walks through the list of all the drives and compares
        all drive temperatures. The highest drive temperature
        is returned as an integer, representing degrees of Celcius.
        """

        data = self.fetch_data()
        temperature = 0
        for controller in data:
            for disk in controller:
                if disk > temperature:
                    temperature = disk
        return int(temperature)

    def get_pwm(self):
        """
        Return the current PWM speed setting.
        """
        filename = self.fan_control_device
        filehandle = open(filename, 'r')
        pwm_value = int(filehandle.read().strip())
        filehandle.close()
        return pwm_value

    def set_pwm(self, value):
        """
        Sets the fan speed. Only allows values between
        pwm_min and pwm_max. Values outside these ranges
        are set to either pwm_min or pwm_max as a safety
        precaution.
        """
        self.changed_pwm = True

        filename = self.fan_control_device
        pwm_max = self.pwm_max
        pwm_min = self.pwm_min
        
        value = pwm_max if value > pwm_max else value
        value = pwm_min if value < pwm_min else value

        filehandle = open(filename, 'w')
        filehandle.write(str(value))
        filehandle.close()

    def set_fan_speed(self,percent):
        """
        Set fan speed based on a percentage of full speed.
        Values are thus 1-100 instead of raw 1-255
        """
        one_percent = float(self.pwm_max) / 100
        pwm = percent * one_percent
        self.set_pwm(int(pwm))

    def enable_fan_control(self):
        """
        Tries to enable manual fan speed control."
        """
        filename = self.fan_control_device
        filehandle = open(filename, 'w')
        try:
            filehandle.write('1')
            filehandle.close()
        except IOError:
            message = "Error enabling filehandlean control."
            self.log(message)

    def get_temperature_deviation(self):
        """
        Calculate the distance between the current temperature and the
        target temperature. This distance is the 'error' as used by the
        PID algorithm to determine the appropriate fan speed.
        """
        return int(self.target_temperature - self.get_highest_temperature())

    def sleep(self):
        """
        Sleep for sleep_time seconds.
        """
        time.sleep(self.sleep_time)


def init(chassis,pid):
    """
    Enable fan control and set the target temperature.
    """
    chassis.enable_fan_control()
    pid.setPoint(chassis.target_temperature)

    try:
        chassis.debug = os.environ['DEBUG'] 
    except (KeyError):
        pass


def main():
    """
    The chassis object is used to control the fan speed and take
    temperature measurements. The pid object is used to calculate
    the fan speed based on past and current temperature values.

    The P, I and D values need to be tuned to your particular
    environment, but they run fine for my machine.
    """
    chassis = FanControl()
    pid = PID(P=1.0, I=1, D=5, Derivator=0, Integrator=0, \
                        Integrator_max=10, Integrator_min=10)

    init(chassis,pid)

    try:
        while True:
            temperature_error = chassis.get_temperature_deviation()
            fan_duty_cycle = int(pid.update(temperature_error))
            chassis.set_fan_speed(fan_duty_cycle)
            chassis.log()
            chassis.sleep()

    except (KeyboardInterrupt, SystemExit):
        chassis.set_pwm(chassis.pwm_safety)

if __name__ == "__main__":
    main()

