#!/usr/bin/python

import sys
import subprocess
import re
import time
import syslog

def log(message,variable=None):
    settings = get_settings()
    if variable is None:
        message = message
    else:
        message = message + ": " + str(variable)
    syslog.syslog(message)
    if settings['debug']:
        print message

def number_of_controllers():
    rawdata = subprocess.Popen(\
        ['/opt/MegaRAID/MegaCli/megacli','-cfgdsply','-aALL'],\
         stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0]
    regex = re.compile('Adapter:.*')
    match = regex.findall(rawdata)
    return len(match)

def get_drive_temp(controller, port):

    rawdata =  subprocess.Popen(\
        ['/opt/MegaRAID/MegaCli/megacli',  '-pdinfo', '-physdrv', '[64:' +\
               str(port) +']', '-a' + str(controller)],\
               stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0] 

    regex = re.compile('Drive Temperature :(.*)')
    match = regex.search(rawdata)
    try:
        temp = match.group(1).split("C")[0]

        # 
        # Ugly hack: issue with some old WD drives
        # Controller reports 65C for them.
        # 

        if temp == "N/A":
            temp = "?"

        if int(temp) >= 60:
            temp = "?"

        return temp
        
    except(AttributeError):
        return ""
    except(IndexError):
        return ""

def get_drive_info(controller, port):
    return get_drive_temp(controller, port)

def fetch_data():
    settings = get_settings()
    controllercount = number_of_controllers()
    ports_per_controller = settings['ports_per_controller']

    drivearray = \
         [[0 for x in xrange(ports_per_controller)]\
            for x in xrange(controllercount)]
        
    for x in xrange(controllercount):
        for y in xrange(ports_per_controller):
            disk = get_drive_info(x, y)
            if len(disk) == 0:
                disk = ""
            drivearray[x][y] = disk

    return drivearray

def get_highest_temperature():
    data = fetch_data()
    temperature = 0
    for controller in data:
        for disk in controller:
            if disk > temperature:
                temperature = disk
    return int(temperature)

def get_pwm():
    settings = get_settings()
    filename = settings['controlfan']

    pwm = open(filename, 'r')
    pwm_value = int(pwm.read().strip())
    pwm.close()
    log("Current PWM",pwm_value)
    return pwm_value

def set_pwm(value):
    settings = get_settings()
    filename = settings['controlfan']

    pwm_max = settings['pwm_max']
    pwm_min = settings['pwm_min']
    
    value = pwm_max if value > pwm_max else value
    value = pwm_min if value < pwm_min else value

    pwm = open(filename, 'w')
    log("Set PWM value",value)
    pwm.write(str(value))
    pwm.close()

def enable_fan_control():
    settings = get_settings()
    filename = settings['controlfan']
    f = open(filename, 'w')
    try:
        f.write('1')
        f.close()
    except IOError:
        message = "Error enabling fan control."
        log(message)

def control_fan(previous_t):
    # delta_t is used to determine if the temperature has
    # changed since the last measurement.
    settings = get_settings()
    current_t = get_highest_temperature()
    if  previous_t is None:
        previous_t = current_t
    delta_t = current_t - previous_t

    log("Highest drive temperature",current_t)
    log("Previous temperature",previous_t)
    log("Difference in degrees",delta_t)

    settings['previous_temperature'] = current_t 

    # Deviation can be positive or negative integer
    # This is used to automatically increase or
    # decrease the fan speed.
    threshold_t = settings['threshold_temperature']
    deviation_t = current_t - threshold_t

    current_pwm = get_pwm()
    pwm_ajustment = settings['pwm_min_delta'] * deviation_t
    #new_pwm = current_pwm + pwm_ajustment + (abs(delta_t) * settings['pwm_min_delta']) 
    new_pwm = current_pwm + pwm_ajustment 

    # If the current temperature is below the lower threshold
    # we don't have to do anything.
    lower_threshold = threshold_t - settings['lower_margin']
    if current_t < lower_threshold:
        log("Temperature is below threshold",current_t)
        return current_t

    # Ajust the temperature if it's above the threshold (too hot).
    if current_t > threshold_t:
        log("Temperature is too high",current_t)
        set_pwm(new_pwm)
        return current_t

    if not delta_t == 0:
        log("Temperature is changing",delta_t)
        set_pwm(new_pwm)
        return current_t
    else:
        log("Temperature is OK",current_t )
        return current_t

def get_settings():
    settings = {}

    if not len(sys.argv) == 2:
        settings['debug'] = False
    else:
        if sys.argv[1] == "debug":
            settings['debug'] = True
        else:
            settings['debug'] = False

    
    settings['threshold_temperature'] = 40
    settings['lower_margin'] = 2
    settings['polling_interval'] = 60
    settings['pwm_max'] = 220
    settings['pwm_min'] = 100
    settings['pwm_default'] = 130
    settings['pwm_min_delta'] = 5
    settings['pwm_max_delta'] = 20
    settings['pwm_safety'] = 160
    settings['previous_temperature'] = None
    settings['enablefan'] = '/sys/class/hwmon/hwmon2/device/pwm2_enable'
    settings['controlfan'] = '/sys/class/hwmon/hwmon2/device/pwm2'
    settings['ports_per_controller'] = 8 

    return settings
        
def main():

    settings = get_settings()
    interval = settings['polling_interval']
    pwm_safety = settings['pwm_safety'] 
    pwm_default = settings['pwm_default']

    try:
        log("* Starting disk fan control.")
        enable_fan_control()

        log("Set fan speed to default value.")
        set_pwm(pwm_default)

        previous_temperature = None

        while True:
            log("---")
            previous_temperature = control_fan(previous_temperature)
            time.sleep(interval)

    except (KeyboardInterrupt, SystemExit):
        set_pwm(pwm_safety)

if __name__ == "__main__":
    
    main()

